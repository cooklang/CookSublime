%YAML 1.2
---

name: Cook
scope: text.cook
file_extensions:
  - cook

###############################################################################

variables:
  special_symbols: '@#~'

contexts:

  prototype:
    - include: comments

  main:
    - include: metadata
    - include: step


  metadata:
    - match: '^>>'
      scope: punctuation.section.mapping.begin.cook
      push:
        - meta_scope: metadata.cook
        - meta_include_prototype: false
        - match: '([^:]+?)($\n?)'
          captures:
            1: entity.name.tag.metadata.cook string.unquoted.plain.out.cook
            2: invalid.illegal.expected-mapping-key.cook
          pop: true

        - match: $\n?
          pop: true

        - match: '[^:]+'
          scope: entity.name.tag.metadata.cook string.unquoted.plain.out.cook
          push:
            - match: $\n?
              scope: invalid.illegal.expected-mapping-key.cook
              pop: true
            - match: ':'
              scope: punctuation.separator.mapping.key-value.cook
              push:
                - match: $\n?
                  scope: invalid.illegal.expected-mapping-key.cook
                  pop: true
                - match: (?=\S)
                  set:
                    - metadata_value_ingredient
                  with_prototype:
                    - match: $\n?
                      pop: true

  metadata_value_ingredient:
    - meta_include_prototype: false
    - meta_scope: value.metadata.cook
    - match: $\n?
      pop: true
    - include: ingredient_amount_quantity

  step:

    - match: \@
      scope: punctuation.definition.ingredient.cook
      push:
        - ingredient

    - match: \#
      scope: punctuation.definition.equipment.cook
      push:
        - equipment

    - match: \~
      scope: punctuation.definition.timer.cook
      push:
        - timer


  ingredient:
    - match: '\('
      scope: punctuation.definition.ingredient.modifier.begin.cook
      push:
        - match: '[^)]+?(?=\))'
          scope: constant.string.ingredient.modifier.cook
        - match: '\)'
          scope: punctuation.definition.ingredient.modifier.end.cook
          pop: true
        - match: '[^)]+?(?=$\n)'
          scope: constant.string.ingredient.modifier.cook

        - match: $\n?
          scope: invalid.illegal.expected-end-of-modifier.cook
          pop: true


    - match: (?<=@)(\w+?)(?={)
      scope: entity.name.tag.ingredient.one-word.cook
      push:
        - begin_ingredient_amount

    - match: (?<=@)([^{{special_symbols}}]+?)(?={)
      scope: entity.name.tag.ingredient.multi-word.cook
      push:
        - begin_ingredient_amount

    - match: (?<=@)(.+?)\b
      scope: entity.name.tag.ingredient.one-word.cook
      pop: true

    - match: ''
      pop: true

  amount_number:
    - match: \d+
      scope: meta.number.integer.decimal.cook constant.numeric.value.cook

  begin_ingredient_amount:
    - match: \{
      scope: punctuation.definition.ingredient.amount.begin.cook
      set:
        - ingredient_amount_quantity

  inside_ingredient_amount:
    - match: \}
      scope: punctuation.definition.ingredient.amount.end.cook
      pop: true
    - match: $\n?
      scope: invalid.illegal.expected-end-of-amount.cook
      pop: true

  ingredient_amount_quantity:
    - include: inside_ingredient_amount
    - include: amount_number
    - match: \%
      scope: punctuation.definition.ingredient.amount.separator.cook
      set: ingredient_amount_after_quantity
    - match: \|
      scope: punctuation.separator.sequence.cook
    - match: '[/*]'
      scope: keyword.operator.arithmetic.cook

  ingredient_amount_after_quantity:
    - include: inside_ingredient_amount
    - match: '[^}%]+?(?=}|%)'
      scope: constant.string.ingredient.amount.cook

    - match: '[^}%]+?(?=$\n)'
      scope: constant.string.ingredient.amount.cook

  equipment:
    - match: (?<=#)(\w+?)(?={)
      scope: entity.name.tag.equipment.one-word.cook

    - match: (?<=#)([^{{special_symbols}}]+?)(?={)
      scope: entity.name.tag.equipment.multi-word.cook

    - match: \{
      scope: punctuation.definition.equipment.details.begin.cook
      set:
        - match: \}
          scope: punctuation.definition.equipment.details.end.cook
          pop: true
        - match: $\n?
          scope: invalid.illegal.expected-end-of-details.cook
          pop: true

    - match: (.+?)\b
      scope: entity.name.tag.equipment.one-word.cook
      pop: true

    - match: ''
      pop: true

  timer:
    - match: (?<=~)(\w*?)(?={)
      scope: entity.name.tag.timer.one-word.cook
      set:
        - timer_duration

    - match: (?<=~)([^{{special_symbols}}]+?)(?={)
      scope: entity.name.tag.timer.multi-word.cook
      set:
        - timer_duration

    - match: ([^{{special_symbols}}]+?)
      scope: invalid.illegal.expected-begining-of-duration.cook

    - match: $\n?
      pop: true

  timer_duration:
    - match: \{\s*?\}
      scope: invalid.illegal.expected-duration.cook
      pop: true

    - match: \{
      scope: punctuation.definition.timer.duration.begin.cook
      set:

        - match: \}
          scope: punctuation.definition.timer.duration.end.cook
          pop: true

        - include: amount_number
        - match: '[^}%]+?(?=}|%)'
          scope: constant.string.timer.duration.cook

        - match: \%
          scope: punctuation.definition.timer.duration.separator.cook

        - match: '[^}%]+?(?=$\n)'
          scope: constant.string.timer.duration.cook

        - match: $\n?
          scope: invalid.illegal.expected-end-of-duration.cook
          pop: true


  comments:
    - match: '--'
      scope: punctuation.definition.comment.cook
      push:
        - meta_scope: comment.line.double-dash.cook
        - match: $\n?
          pop: true

    - match: '\[\-'
      scope: punctuation.definition.comment.begin.cook
      push:
        - meta_scope: comment.block.cook
        - match: '\-\]'
          scope: punctuation.definition.comment.end.cook
          pop: true
